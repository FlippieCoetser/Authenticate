% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Authentication.Controller.R
\name{Controller}
\alias{Controller}
\title{Authentication Controller for Shiny Application}
\usage{
Controller(id, storage, user = shiny::reactiveValues(), debug = FALSE)
}
\arguments{
\item{id}{A unique identifier for the Shiny module.}

\item{storage}{A storage backend, presumably for managing user data.}

\item{debug}{A logical value indicating whether to print debug messages.}

\item{app}{A reference to the main Shiny app object, used to manage global states.}
}
\value{
A Shiny module server function that can be invoked with \code{callModule}.
}
\description{
This function manages user authentication within a Shiny application. It
sets up a module server for handling user interactions related to login,
registration, and session management. It includes mechanisms to validate
user inputs, manage user session states, and dynamically update UI elements
based on the authentication state.
}
\details{
The function creates a series of event observers and reactive expressions that:
\itemize{
\item Handle guest and registered user logins.
\item Manage user registration.
\item Authenticate user credentials.
\item Provide functionality for user logout and cancellation of operations.
\item Dynamically control the visibility of UI elements such as username display and login/logout buttons based on the user's authentication status.
}

Each user interaction is validated through a set of predefined validation functions,
and the UI is updated accordingly to reflect the current state. Errors in user input
are handled gracefully, providing modal dialogs to inform users of specific issues.
}
